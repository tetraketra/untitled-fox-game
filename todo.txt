[[DATA STRUCTURES]]
- write `dynamicarray.c`/`dybamicarray.h`
    - implemented as dynmatically sized c-style array
    - should expose var-arg creation syntax
        - e.g. `dyn_array_init(int, 1, 2, 3, 4, 5)` -> {1,2,3,4,5,0,0,0}
    - should expose set/get index which resizes to power of 2 which fits
        - e.g. `{1,2,3,0}`, set(1, 5) -> `{1,5,3,0}`, set(5, 4) -> {1,5,3,0,0,4,0,0,0}
- write bit_array? maybe
    - ** maybe also a specific-length packing system? like "adjacent 5bit numbers" **
    - https://en.wikipedia.org/wiki/Bit_array
    - you can bit shift by casting a series of bits to an int, shifting,
      then comparing to original size's max (e.g. https://stackoverflow.com/questions/8534107/detecting-multiplication-of-uint64-t-integers-overflow-with-c)
    - bit arrays are useful for properties, compression algs, and bloom filters

[[TGL]]
...

[[JSON READER]]
For keybinds I need keybind names. 
For good keybind names I need collections of strings in languages.
- 1. strings, both on file and in memory with bounds. string.h? Look into it
- 2. languages, JSON parser?

Make just a JSON reader for now, then later a JSON writer if wanted?
- 1. No modification makes it *much* easier on me. 
- 2. I can also put all children in a constant-length array!
Will need to support escaped strings and be full utf-8 capable for other languages T>T
>> https://stackoverflow.com/questions/16372615/reading-unicode-file-in-c <<